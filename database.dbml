// Database for GiaSu API - Schema derived from script.sql
Project GiaSu_LMS {
  database_type: 'SQLite'
  Note: '''
    Database schema matching script.sql: users, lessons, tests, test questions, user test results, user question answers, universities, university scores, user preferences, recommendations, lesson tracking, quizlet
  '''
}

Table Users {
  id integer [primary key, increment]
  username text [not null, unique]
  email text [not null, unique]
  image_url text
  role text [default: 'student']
}

Table Lessons {
  id integer [primary key, increment]
  title text [not null]
  description text
  content text
  subject text
  content_url text
  created_by integer [ref: > Users.id]
  created_at datetime [default: `CURRENT_TIMESTAMP`]
}

Table Tests {
  id integer [primary key, increment]
  title text [not null]
  description text
  created_by integer [ref: > Users.id]
  created_at datetime [default: `CURRENT_TIMESTAMP`]
  supports_multiple_answers boolean [default: false]
}

Table TestQuestions {
  id integer [primary key, increment]
  test_id integer [not null, ref: > Tests.id]
  question_text text [not null]
  option_a text
  option_b text
  option_c text
  option_d text
  question_type text [default: 'single']
  correct_options text
  points real [default: 1.0]
}

Table UserTestResults {
  id integer [primary key, increment]
  user_id integer [not null, ref: > Users.id]
  test_id integer [not null, ref: > Tests.id]
  score real
  total_questions integer
  correct_answers integer
  points_earned real [default: 0.0]
  points_possible real [default: 0.0]
  taken_at datetime [default: `CURRENT_TIMESTAMP`]
}

Table UserQuestionAnswers {
  id integer [primary key, increment]
  test_result_id integer [not null, ref: > UserTestResults.id]
  question_id integer [not null, ref: > TestQuestions.id]
  user_answer text
  is_correct boolean [default: false]
  partial_credit real [default: 0.0]
  answered_at datetime [default: `CURRENT_TIMESTAMP`]
}

Table Universities {
  id integer [primary key, increment]
  name text [not null]
  location text
  type text
  description text
}

Table UniversityScores {
  id integer [primary key, increment]
  university_id integer [not null, ref: > Universities.id]
  year integer [not null]
  min_score real
  avg_score real
  max_score real
}

Table UserPreferences {
  id integer [primary key, increment]
  user_id integer [not null, ref: > Users.id]
  preferred_major text
  current_score real
  expected_score real
  created_at datetime [default: `CURRENT_TIMESTAMP`]
}

Table UniversityRecommendations {
  id integer [primary key, increment]
  user_id integer [not null, ref: > Users.id]
  university_id integer [not null, ref: > Universities.id]
  recommended_at datetime [default: `CURRENT_TIMESTAMP`]
}

Table LessonTracking {
  id integer [primary key, increment]
  user_id integer [not null, ref: > Users.id]
  lesson_id integer [not null, ref: > Lessons.id]
  is_finished boolean [default: false]
  created_at datetime [default: `CURRENT_TIMESTAMP`]
}

Table Quizlet {
  id integer [primary key, increment]
  lesson_id integer [not null, ref: > Lessons.id]
  question text [not null]
  answer text [not null]
  created_at datetime [default: `CURRENT_TIMESTAMP`]
}

// Relationships (foreign keys)
Ref: Lessons.created_by > Users.id
Ref: TestQuestions.test_id > Tests.id
Ref: UserTestResults.user_id > Users.id
Ref: UserTestResults.test_id > Tests.id
Ref: UserQuestionAnswers.test_result_id > UserTestResults.id
Ref: UserQuestionAnswers.question_id > TestQuestions.id
Ref: UniversityScores.university_id > Universities.id
Ref: UserPreferences.user_id > Users.id
Ref: UniversityRecommendations.user_id > Users.id
Ref: UniversityRecommendations.university_id > Universities.id
Ref: LessonTracking.user_id > Users.id
Ref: LessonTracking.lesson_id > Lessons.id
Ref: Quizlet.lesson_id > Lessons.id
